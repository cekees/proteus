#ifndef TRANSPORTCOEFFICIENTS_H
#define TRANSPORTCOEFFICIENTS_H

#include <math.h>
#include <assert.h>
#include <stdio.h>
#include <memory.h>
#include <stdlib.h>

/** \file transportCoefficients.h
    \defgroup transportCoefficients transportCoefficients
    \brief A C library for coefficients of PDE's.
    @{
*/
extern void groundwaterTransportCoefficientsEvaluate(const int nPoints,
                                              const int nSpace,
                                              const double omega,
                                              const double d,
                                              const double alpha_L,
                                              const double alpha_T,
                                              const double *v,
                                              const double *u,
                                              double *m,
                                              double *dm,
                                              double *f,
                                              double *df,
                                              double *a);

extern void TwophaseNavierStokes_ST_LS_SO_3D_Evaluate(const int nPoints,
                                               const double eps_rho,
                                               const double eps_mu,
                                               const double sigma,
                                               const double rho_0,
                                               const double nu_0,
                                               const double rho_1,
                                               const double nu_1,
                                               const double* g,
                                               const double* phi,
                                               const double* n,
                                               const double* kappa,
                                               const double *p,
                                               const double *grad_p,
                                               const double *u,
                                               const double *v,
                                               const double *w,
                                               double *mom_u_acc,
                                               double *dmom_u_acc_u,
                                               double *mom_v_acc,
                                               double *dmom_v_acc_v,
                                               double *mom_w_acc,
                                               double *dmom_w_acc_w,
                                               double *mass_adv,
                                               double *dmass_adv_u,
                                               double *dmass_adv_v,
                                               double *dmass_adv_w,
                                               double *mom_u_adv,
                                               double *dmom_u_adv_u,
                                               double *dmom_u_adv_v,
                                               double *dmom_u_adv_w,
                                               double *mom_v_adv,
                                               double *dmom_v_adv_u,
                                               double *dmom_v_adv_v,
                                               double *dmom_v_adv_w,
                                               double *mom_w_adv,
                                               double *dmom_w_adv_u,
                                               double *dmom_w_adv_v,
                                               double *dmom_w_adv_w,
                                               double *mom_u_diff_ten,
                                               double *mom_v_diff_ten,
                                               double *mom_w_diff_ten,
                                               double *mom_uv_diff_ten,
                                               double *mom_uw_diff_ten,
                                               double *mom_vu_diff_ten,
                                               double *mom_vw_diff_ten,
                                               double *mom_wu_diff_ten,
                                               double *mom_wv_diff_ten,
                                               double *mom_u_source,
                                               double *mom_v_source,
                                               double *mom_w_source,
                                               double *mom_u_ham,
                                               double *dmom_u_ham_grad_p,
                                               double *mom_v_ham,
                                               double *dmom_v_ham_grad_p,
                                               double *mom_w_ham,
                                               double *dmom_w_ham_grad_p);
extern void VOFCoefficientsEvaluate(int nPoints,
                             int nSpace,
                             double eps,
                             double* v,
                             double* phi,
                             double* u,
                             double* m,
                             double* dm,
                             double* f,
                             double* df);
extern void redistanceLevelSetSandFCoefficientsEvaluate(int nSimplex, 
						 int nPointsPerSimplex,
						 int nSpace,
						 double eps,
						 double* u_levelSet,
						 double* dV,
						 double* u,
						 double* grad_u,
						 double* m,
						 double* dm,
						 double* H,
						 double* dH,
						 double* r);

extern void conservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2(const int nSimplex,
                                                                    const int nPointsPerSimplex,
                                                                    const int nSpace,
                                                                    const int* materialTypes,
                                                                    const double rho,
                                                                    const double beta,
                                                                    const double* gravity,
                                                                    const double* alpha,
                                                                    const double* n,
                                                                    const double* thetaR,
                                                                    const double* thetaSR,
                                                                    const double* KWs,
                                                                    double *u,
                                                                    double *mass,
                                                                    double *dmass,
                                                                    double *f,
                                                                    double *df,
                                                                    double *a,
                                                                    double *da);
extern void kEpsilon_2D_Evaluate(int nPoints,
			  int nSpace,
			  double sigma_k,
			  double sigma_e,
			  double c_1,
			  double c_2,
			  double c_mu,
			  double c_e,
			  double nu,
			  double *velocity,
			  double *gradu,
			  double *gradv,
			  double *k,
			  double *epsilon,
			  double *m_k,
			  double *dm_k,
			  double *m_e,
			  double *dm_e,
			  double *phi_k,
			  double *dphi_k,
			  double *phi_e,
			  double *dphi_e,
			  double *f_k,
			  double *df_k,
			  double *f_e,
			  double *df_e,
			  double *a_k,
			  double *da_k_dk,
			  double *da_k_de,
			  double *a_e,
			  double *da_e_dk,
			  double *da_e_de,
			  double *r_k,
			  double *dr_k_dk,
			  double *dr_k_de,
			  double *r_e,
			  double *dr_e_dk,
			  double *dr_e_de);
extern double smoothedHeaviside(
  double eps,
  double phi
);
extern double smoothedHeaviside_integral(
  double eps,
  double phi
);
extern double smoothedDirac(
  double eps,
  double phi
);
extern void linearADR_ConstantCoefficientsEvaluate(
  const int nPoints,
  const int nSpace,
  const double M,
  const double *A,
  const double *B,
  const double C,
  const double t,
  const double *x,
  const double *u,
  double *m,
  double *dm,
  double *f,
  double *df,
  double *a,
  double *r,
  double *dr
);
extern void nonlinearADR_pqrstEvaluate(
  const int nPoints,
  const int nSpace,
  const double M,
  const double *A,
  const double *B,
  const double C,
  const double p_pow,
  const double q_pow,
  const double r_pow,
  const double s_pow,
  const double t_pow,
  const double t,
  const double *x,
  const double *u,
  double *m,
  double *dm,
  double *f,
  double *df,
  double *a,
  double *da,
  double *phi,
  double *dphi,
  double *r,
  double *dr
);
extern void nonlinearADR_pqrstDualEvaluate(
  const int nPoints,
  const int nSpace,
  const double M,
  const double *A,
  const double *B,
  const double C,
  const double p1,
  const double q1,
  const double r1,
  const double s1,
  const double t1,
  const double p2,
  const double q2,
  const double r2,
  const double s2,
  const double t2,
  const double t,
  const double *x,
  const double *u,
  double *m,
  double *dm,
  double *f,
  double *df,
  double *a,
  double *da,
  double *phi,
  double *dphi,
  double *r,
  double *dr
);
extern void unitSquareRotationEvaluate(
  const int nPoints,
  const int nSpace,
  const double *x,
  const double *u,
  double *m,
  double *dm,
  double *f,
  double *df
);
extern void rotatingPulseVelEvaluate(
  const int nPoints,
  const int nSpace,
  const double self_a,
  const double *x,
  const double *u,
  double *m,
  double *dm,
  double *f,
  double *df,
  double *a,
  double *da,
  double *phi,
  double *dphi
);
extern void disRotatingPulseVelEvaluate(
  const int nPoints,
  const int nSpace,
  const double self_a,
  const double *x,
  const double *u,
  double *m,
  double *dm,
  double *f,
  double *df,
  double *a,
  double *da,
  double *phi,
  double *dphi
);
extern void disVelEvaluate(
  const int nPoints,
  const int nSpace,
  const double self_a,
  const double *x,
  const double *u,
  double *m,
  double *dm,
  double *f,
  double *df,
  double *a,
  double *da,
  double *phi,
  double *dphi
);
extern void burgersDiagonalVelEvaluate(
  const int nPoints,
  const int nSpace,
  const double self_a,
  const double * self_v,
  const double *u,
  double *m,
  double *dm,
  double *f,
  double *df,
  double *a,
  double *phi,
  double *dphi
);
extern void twophasePotentialFlowEvaluate(
  int nPoints,
  int nSpace,
  double *M,
  double *A,
  double *B,
  double *Bcon,
  double *C,
  double t,
  double *x,
  double *u,
  double *m,
  double *dm,
  double *f,
  double *df,
  double *a,
  double *da,
  double *phi,
  double *dphi,
  double *r,
  double *dr
);
extern void twophasePotentialFlowUpdateFreeSurface(
  int nPoints,
  int nSpace,
  double eps,
  double *u_levelSet,
  double M1,
  double M2,
  double *M,
  double *A1,
  double *A2,
  double *A,
  double *B1,
  double *B2,
  double *B,
  double *Bcon1,
  double *Bcon2,
  double *Bcon,
  double C1,
  double C2,
  double *C
);
extern void twophaseLevelSetCoefficientsUpdateVelocity(
  int nPoints,
  int nSpace,
  double v_scale,
  double *vIn,
  double *vOut
);
extern void twophaseLevelSetCoefficientsEvaluate(
  int nPoints,
  int nSpace,
  double *B,
  double t,
  double *x,
  double *u,
  double *grad_u,
  double *m,
  double *dm,
  double *h,
  double *dh,
  double *rh
);
extern void twophaseLevelSetCoefficientsEvaluateCI(
  int nPoints,
  int nSpace,
  double *B,
  double t,
  double *x,
  double *u,
  double *m,
  double *dm,
  double *f,
  double *df,
  double *a,
  double *da,
  double *phi,
  double *dphi,
  double *r,
  double *dr
);
extern void ncLevelSetCoefficientsEvaluate(
  int nPoints,
  int nSpace,
  double *v,
  double *u,
  double *grad_u,
  double *m,
  double *dm,
  double *H,
  double *dH
);
extern void cLevelSetCoefficientsEvaluate(
  int nPoints,
  int nSpace,
  double *v,
  double *u,
  double *m,
  double *dm,
  double *f,
  double *df
);
extern void levelSetCurvatureCoefficientsEvaluate(
  int nPoints,
  int nSpace,
  double *grad_phi,
  double *u,
  double *f,
  double *r,
  double *dr
);
extern void twophaseSignedDistanceCoefficientsUpdateSignFunction(
  int nPoints,
  double eps,
  double *u_levelSet,
  double *S
);
extern void twophaseSignedDistanceCoefficientsEvaluate(
  int nPoints,
  int nSpace,
  double *S,
  double *u,
  double *grad_u,
  double *m,
  double *dm,
  double *h,
  double *dh,
  double *rh
);
extern void redistanceLevelSetCoefficientsEvaluate(
  int nPoints,
  int nSpace,
  double eps,
  double *u_levelSet,
  double *u,
  double *grad_u,
  double *m,
  double *dm,
  double *H,
  double *dH,
  double *r
);
extern void darcySharpInterfaceFlowEvaluate(
  int nPoints,
  int nSpace,
  double Km,
  double rhoM,
  double Kp,
  double rhoP,
  double eps,
  double *gravity_u,
  double *u,
  double *gradu,
  double *u_levelSet,
  double *phi_pot,
  double *a,
  double *f,
  double *r,
  double *m,
  double *dphi_pot,
  double *da,
  double *df,
  double *dr,
  double *dm
);
extern void darcySharpInterfaceFlowImEvaluate(
  int nPoints,
  int nSpace,
  double Km,
  double rhoM,
  double Kp,
  double rhoP,
  double eps,
  double *gravity_u,
  double *u,
  double *gradu,
  double *u_levelSet,
  double *phi_pot,
  double *a,
  double *f,
  double *r,
  double *m,
  double *dphi_pot,
  double *da,
  double *df,
  double *dr,
  double *dm
);
extern void conservativeHeadRichardsMualemVanGenuchtenHomEvaluate(
  const int nPoints,
  const int nSpace,
  const double rho,
  const double beta,
  const double *gravity,
  const double *x,
  const double alpha,
  const double n,
  const double m,
  const double thetaR,
  const double thetaSR,
  const double KWs,
  double *u,
  double *mass,
  double *dmass,
  double *f,
  double *df,
  double *a,
  double *da,
  double *phi,
  double *dphi
);
extern void conservativeHeadRichardsL2projMualemVanGenuchtenHomEvaluate(
  const int nSimplices,
  const int nPointsPerSimplex,
  const int nSpace,
  const double rho,
  const double *gravity,
  const double alpha,
  const double n,
  const double m,
  const double thetaR,
  const double thetaSR,
  const double KWs,
  double *dV,
  double *u,
  double *mass,
  double *dmass,
  double *f,
  double *df,
  double *a,
  double *da
);
extern void conservativeHeadRichardsL2projBndMualemVanGenuchtenHomEvaluate(
  const int nElements,
  const int nElementBoundaries_element,
  const int nPointsPerElementBoundary,
  const int nSpace,
  const double rho,
  const double *gravity,
  const double alpha,
  const double n,
  const double m,
  const double thetaR,
  const double thetaSR,
  const double KWs,
  double *dV,
  double *u,
  double *mass,
  double *dmass,
  double *f,
  double *df,
  double *a,
  double *da
);
extern void conservativeHeadRichardsL2projMualemVanGenuchtenHetEvaluate(
  const int nSimplices,
  const int nPointsPerSimplex,
  const int nSpace,
  const double rho,
  const double *gravity,
  const double *alpha,
  const double *n,
  const double *thetaR,
  const double *thetaSR,
  const double *KWs,
  double *dV,
  double *u,
  double *mass,
  double *dmass,
  double *f,
  double *df,
  double *a,
  double *da
);
extern void conservativeTotalHeadRichardsMualemVanGenuchtenHomEvaluate(
  const int nPoints,
  const int nSpace,
  const double rho,
  const double *gravity,
  const double *x,
  const double alpha,
  const double n,
  const double m,
  const double thetaR,
  const double thetaSR,
  const double KWs,
  double *u,
  double *mass,
  double *dmass,
  double *f,
  double *df,
  double *a,
  double *da,
  double *phi,
  double *dphi
);
extern void l2projectScalar(
  const int nSimplices,
  const int nPointsPerSimplex,
  double *dV,
  double *r
);
extern void l2projectVector(
  const int nSimplices,
  const int nPointsPerSimplex,
  const int nSpace,
  double *dV,
  double *r
);
extern void l2project2Tensor(
  const int nSimplices,
  const int nPointsPerSimplex,
  const int nSpace,
  double *dV,
  double *r
);
extern void conservativeHeadRichardsMualemVanGenuchtenHetEvaluate(
  const int nPoints,
  const int nSpace,
  const double rho,
  const double *gravity,
  const double *alpha,
  const double *n,
  const double *thetaR,
  const double *thetaSR,
  const double *KWs,
  double *u,
  double *mass,
  double *dmass,
  double *f,
  double *df,
  double *a,
  double *da
);
extern void conservativeSatRichardsMualemVanGenuchtenHomEvaluate(
  const int nPoints,
  const int nSpace,
  const double rho,
  const double *gravity,
  const double *x,
  const double alpha,
  const double n,
  const double m,
  const double thetaR,
  const double thetaSR,
  const double KWs,
  double *u,
  double *mass,
  double *dmass,
  double *f,
  double *df,
  double *a,
  double *da,
  double *phi,
  double *dphi
);
extern void conservativeHeadRichardsBrooksCoreyBurdineHetEvaluate(
  const int nPoints,
  const int nSpace,
  const double rho,
  const double *gravity,
  const double *lambda,
  const double *pd,
  const double *thetaR,
  const double *thetaS,
  const double *KWs,
  double *u,
  double *mass,
  double *dmass,
  double *f,
  double *df,
  double *a,
  double *da
);
extern void conservativeHeadRichardsBrooksCoreyBurdineHomEvaluate(
  const int nPoints,
  const int nSpace,
  const double rho,
  const double beta,
  const double *gravity,
  const double lambda,
  const double pd,
  const double thetaR,
  const double thetaSR,
  const double KWs,
  double *u,
  double *mass,
  double *dmass,
  double *f,
  double *df,
  double *a,
  double *da
);
extern void conservativeSatRichardsBrooksCoreyBurdineHomEvaluate(
  const int nPoints,
  const int nSpace,
  const double rho,
  const double *gravity,
  const double lambda,
  const double pd,
  const double thetaR,
  const double thetaSR,
  const double KWs,
  double *u,
  double *mass,
  double *dmass,
  double *f,
  double *df,
  double *a,
  double *da,
  double *phi,
  double *dphi
);
extern void conservativeHeadRichardsBCBfromMVGHomEvaluate(
  const int nPoints,
  const int nSpace,
  const double rho,
  const double *gravity,
  const double alpha,
  const double n,
  const double m,
  const double thetaR,
  const double thetaSR,
  const double KWs,
  double *u,
  double *mass,
  double *dmass,
  double *f,
  double *df,
  double *a,
  double *da
);
extern void NavierStokes_2D_Evaluate(
  const int nPoints,
  const double rho,
  const double nu,
  const double *g,
  const double *p,
  const double *grad_p,
  const double *u,
  const double *v,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *mom_u_adv,
  double *dmom_u_adv_u,
  double *dmom_u_adv_v,
  double *mom_v_adv,
  double *dmom_v_adv_u,
  double *dmom_v_adv_v,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_u_source,
  double *mom_v_source,
  double *mom_u_ham,
  double *dmom_u_ham_grad_p,
  double *mom_v_ham,
  double *dmom_v_ham_grad_p
);
extern void NavierStokes_3D_Evaluate(
  const int nPoints,
  const double rho,
  const double nu,
  const double *g,
  const double *p,
  const double *grad_p,
  const double *u,
  const double *v,
  const double *w,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mom_w_acc,
  double *dmom_w_acc_w,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *dmass_adv_w,
  double *mom_u_adv,
  double *dmom_u_adv_u,
  double *dmom_u_adv_v,
  double *dmom_u_adv_w,
  double *mom_v_adv,
  double *dmom_v_adv_u,
  double *dmom_v_adv_v,
  double *dmom_v_adv_w,
  double *mom_w_adv,
  double *dmom_w_adv_u,
  double *dmom_w_adv_v,
  double *dmom_w_adv_w,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_w_diff_ten,
  double *mom_u_source,
  double *mom_v_source,
  double *mom_w_source,
  double *mom_u_ham,
  double *dmom_u_ham_grad_p,
  double *mom_v_ham,
  double *dmom_v_ham_grad_p,
  double *mom_w_ham,
  double *dmom_w_ham_grad_p
);
extern void Stokes_2D_Evaluate(
  const int nPoints,
  const double rho,
  const double nu,
  const double *g,
  const double *p,
  const double *grad_p,
  const double *u,
  const double *v,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_u_source,
  double *mom_v_source,
  double *mom_u_ham,
  double *dmom_u_ham_grad_p,
  double *mom_v_ham,
  double *dmom_v_ham_grad_p
);
extern void StokesP_2D_Evaluate(
  const int nPoints,
  const double rho,
  const double nu,
  const double *g,
  const double *p,
  const double *u,
  const double *v,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *mom_u_adv,
  double *dmom_u_adv_p,
  double *mom_v_adv,
  double *dmom_v_adv_p,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_u_source,
  double *mom_v_source
);
extern void Stokes_3D_Evaluate(
  const int nPoints,
  const double rho,
  const double nu,
  const double *g,
  const double *p,
  const double *grad_p,
  const double *u,
  const double *v,
  const double *w,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mom_w_acc,
  double *dmom_w_acc_w,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *dmass_adv_w,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_w_diff_ten,
  double *mom_u_source,
  double *mom_v_source,
  double *mom_w_source,
  double *mom_u_ham,
  double *dmom_u_ham_grad_p,
  double *mom_v_ham,
  double *dmom_v_ham_grad_p,
  double *mom_w_ham,
  double *dmom_w_ham_grad_p
);
extern void TwophaseNavierStokes_LS_SO_2D_Evaluate(
  const int nPoints,
  const double eps,
  const double rho_0,
  const double nu_0,
  const double rho_1,
  const double nu_1,
  const double *g,
  const double *phi,
  const double *p,
  const double *grad_p,
  const double *u,
  const double *v,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *mom_u_adv,
  double *dmom_u_adv_u,
  double *dmom_u_adv_v,
  double *mom_v_adv,
  double *dmom_v_adv_u,
  double *dmom_v_adv_v,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_u_source,
  double *mom_v_source,
  double *mom_u_ham,
  double *dmom_u_ham_grad_p,
  double *mom_v_ham,
  double *dmom_v_ham_grad_p
);
extern void TwophaseNavierStokes_ST_LS_SO_2D_Evaluate(
  const int nPoints,
  const double eps_rho,
  const double eps_mu,
  const double sigma,
  const double rho_0,
  const double nu_0,
  const double rho_1,
  const double nu_1,
  const double *g,
  const double *phi,
  const double *n,
  const double *kappa,
  const double *p,
  const double *grad_p,
  const double *u,
  const double *v,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *mom_u_adv,
  double *dmom_u_adv_u,
  double *dmom_u_adv_v,
  double *mom_v_adv,
  double *dmom_v_adv_u,
  double *dmom_v_adv_v,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_uv_diff_ten,
  double *mom_vu_diff_ten,
  double *mom_u_source,
  double *mom_v_source,
  double *mom_u_ham,
  double *dmom_u_ham_grad_p,
  double *mom_v_ham,
  double *dmom_v_ham_grad_p
);
extern void TwophaseNavierStokes_LS_SO_3D_Evaluate(
  const int nPoints,
  const double eps,
  const double rho_0,
  const double nu_0,
  const double rho_1,
  const double nu_1,
  const double *g,
  const double *phi,
  const double *p,
  const double *grad_p,
  const double *u,
  const double *v,
  const double *w,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mom_w_acc,
  double *dmom_w_acc_w,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *dmass_adv_w,
  double *mom_u_adv,
  double *dmom_u_adv_u,
  double *dmom_u_adv_v,
  double *dmom_u_adv_w,
  double *mom_v_adv,
  double *dmom_v_adv_u,
  double *dmom_v_adv_v,
  double *dmom_v_adv_w,
  double *mom_w_adv,
  double *dmom_w_adv_u,
  double *dmom_w_adv_v,
  double *dmom_w_adv_w,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_w_diff_ten,
  double *mom_u_source,
  double *mom_v_source,
  double *mom_w_source,
  double *mom_u_ham,
  double *dmom_u_ham_grad_p,
  double *mom_v_ham,
  double *dmom_v_ham_grad_p,
  double *mom_w_ham,
  double *dmom_w_ham_grad_p
);
extern void TwophaseStokes_LS_SO_2D_Evaluate(
  const int nPoints,
  const double eps,
  const double rho_0,
  const double nu_0,
  const double rho_1,
  const double nu_1,
  const double *g,
  const double *phi,
  const double *p,
  const double *grad_p,
  const double *u,
  const double *v,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_u_source,
  double *mom_v_source,
  double *mom_u_ham,
  double *dmom_u_ham_grad_p,
  double *mom_v_ham,
  double *dmom_v_ham_grad_p
);
extern void TwophaseStokes_LS_SO_3D_Evaluate(
  const int nPoints,
  const double eps,
  const double rho_0,
  const double nu_0,
  const double rho_1,
  const double nu_1,
  const double *g,
  const double *phi,
  const double *p,
  const double *grad_p,
  const double *u,
  const double *v,
  const double *w,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mom_w_acc,
  double *dmom_w_acc_w,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *dmass_adv_w,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_w_diff_ten,
  double *mom_u_source,
  double *mom_v_source,
  double *mom_w_source,
  double *mom_u_ham,
  double *dmom_u_ham_grad_p,
  double *mom_v_ham,
  double *dmom_v_ham_grad_p,
  double *mom_w_ham,
  double *dmom_w_ham_grad_p
);
extern void TwophaseNavierStokes_VOF_SO_2D_Evaluate(
  const int nPoints,
  const double eps,
  const double rho_0,
  const double nu_0,
  const double rho_1,
  const double nu_1,
  const double *g,
  const double *vof,
  const double *p,
  const double *grad_p,
  const double *u,
  const double *v,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *mom_u_adv,
  double *dmom_u_adv_u,
  double *dmom_u_adv_v,
  double *mom_v_adv,
  double *dmom_v_adv_u,
  double *dmom_v_adv_v,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_u_source,
  double *mom_v_source,
  double *mom_u_ham,
  double *dmom_u_ham_grad_p,
  double *mom_v_ham,
  double *dmom_v_ham_grad_p
);
extern void TwophaseNavierStokes_VOF_SO_3D_Evaluate(
  const int nPoints,
  const double eps,
  const double rho_0,
  const double nu_0,
  const double rho_1,
  const double nu_1,
  const double *g,
  const double *vof,
  const double *p,
  const double *grad_p,
  const double *u,
  const double *v,
  const double *w,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mom_w_acc,
  double *dmom_w_acc_w,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *dmass_adv_w,
  double *mom_u_adv,
  double *dmom_u_adv_u,
  double *dmom_u_adv_v,
  double *dmom_u_adv_w,
  double *mom_v_adv,
  double *dmom_v_adv_u,
  double *dmom_v_adv_v,
  double *dmom_v_adv_w,
  double *mom_w_adv,
  double *dmom_w_adv_u,
  double *dmom_w_adv_v,
  double *dmom_w_adv_w,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_w_diff_ten,
  double *mom_u_source,
  double *mom_v_source,
  double *mom_w_source,
  double *mom_u_ham,
  double *dmom_u_ham_grad_p,
  double *mom_v_ham,
  double *dmom_v_ham_grad_p,
  double *mom_w_ham,
  double *dmom_w_ham_grad_p
);
extern void TwophaseStokes_VOF_SO_2D_Evaluate(
  const int nPoints,
  const double eps,
  const double rho_0,
  const double nu_0,
  const double rho_1,
  const double nu_1,
  const double *g,
  const double *vof,
  const double *p,
  const double *grad_p,
  const double *u,
  const double *v,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_u_source,
  double *mom_v_source,
  double *mom_u_ham,
  double *dmom_u_ham_grad_p,
  double *mom_v_ham,
  double *dmom_v_ham_grad_p
);
extern void TwophaseStokes_VOF_SO_3D_Evaluate(
  const int nPoints,
  const double eps,
  const double rho_0,
  const double nu_0,
  const double rho_1,
  const double nu_1,
  const double *g,
  const double *vof,
  const double *p,
  const double *grad_p,
  const double *u,
  const double *v,
  const double *w,
  double *mom_u_acc,
  double *dmom_u_acc_u,
  double *mom_v_acc,
  double *dmom_v_acc_v,
  double *mom_w_acc,
  double *dmom_w_acc_w,
  double *mass_adv,
  double *dmass_adv_u,
  double *dmass_adv_v,
  double *dmass_adv_w,
  double *mom_u_diff_ten,
  double *mom_v_diff_ten,
  double *mom_w_diff_ten,
  double *mom_u_source,
  double *mom_v_source,
  double *mom_w_source,
  double *mom_u_ham,
  double *dmom_u_ham_grad_p,
  double *mom_v_ham,
  double *dmom_v_ham_grad_p,
  double *mom_w_ham,
  double *dmom_w_ham_grad_p
);
extern void VolumeAveragedNavierStokesFullDevStress_2D_Evaluate(const int nPoints,
								const double rho,
								const double mu,
								const double *meanGrainSize,
								const double *g,
								const double *p,
								const double *grad_p,
								const double *u,
								const double *v,
								const double *porosity,
								double *mom_u_acc,
								double *dmom_u_acc_u,
								double *mom_v_acc,
								double *dmom_v_acc_v,
								double *mass_adv,
								double *dmass_adv_u,
								double *dmass_adv_v,
								double *mom_u_adv,
								double *dmom_u_adv_u,
								double *dmom_u_adv_v,
								double *mom_v_adv,
								double *dmom_v_adv_u,
								double *dmom_v_adv_v,
								double *mom_u_diff_ten,
								double *mom_v_diff_ten,
								double *mom_uv_diff_ten,
								double *mom_vu_diff_ten,
								double *mom_u_source,
								double *mom_v_source,
								double *dmom_u_source_u,
								double *dmom_u_source_v,
								double *dmom_v_source_u,
								double *dmom_v_source_v,
								double *mom_u_ham,
								double *dmom_u_ham_grad_p,
								double *mom_v_ham,
								double *dmom_v_ham_grad_p);


extern void VolumeAveragedNavierStokesFullDevStress_3D_Evaluate(const int nPoints,
								const double rho,
								const double mu,
								const double *meanGrainSize,
								const double *g,
								const double *p,
								const double *grad_p,
								const double *u,
								const double *v,
								const double *w,
								const double *porosity,
								double *mom_u_acc,
								double *dmom_u_acc_u,
								double *mom_v_acc,
								double *dmom_v_acc_v,
								double *mom_w_acc,
								double *dmom_w_acc_w,
								double *mass_adv,
								double *dmass_adv_u,
								double *dmass_adv_v,
								double *dmass_adv_w,
								double *mom_u_adv,
								double *dmom_u_adv_u,
								double *dmom_u_adv_v,
								double *dmom_u_adv_w,
								double *mom_v_adv,
								double *dmom_v_adv_u,
								double *dmom_v_adv_v,
								double *dmom_v_adv_w,
								double *mom_w_adv,
								double *dmom_w_adv_u,
								double *dmom_w_adv_v,
								double *dmom_w_adv_w,
								double *mom_u_diff_ten,
								double *mom_v_diff_ten,
								double *mom_w_diff_ten,
								double *mom_uv_diff_ten,
								double *mom_uw_diff_ten,
								double *mom_vu_diff_ten,
								double *mom_vw_diff_ten,
								double *mom_wu_diff_ten,
								double *mom_wv_diff_ten,
								double *mom_u_source,
								double *mom_v_source,
								double *mom_w_source,
								double *dmom_u_source_u,
								double *dmom_u_source_v,
								double *dmom_u_source_w,
								double *dmom_v_source_u,
								double *dmom_v_source_v,
								double *dmom_v_source_w,
								double *dmom_w_source_u,
								double *dmom_w_source_v,
								double *dmom_w_source_w,
								double *mom_u_ham,
								double *dmom_u_ham_grad_p,
								double *mom_v_ham,
								double *dmom_v_ham_grad_p,
								double *mom_w_ham,
								double *dmom_w_ham_grad_p);

extern
void VolumeAveragedTwophaseNavierStokes_ST_LS_SO_2D_Evaluate(const int nPoints,
							     const int killNonlinearDrag,
							     const double eps_rho,
							     const double eps_mu,
							     const double sigma,
							     const double rho_0,
							     const double nu_0,
							     const double rho_1,
							     const double nu_1,
							     const double* meanGrainSize,
							     const double* g,
							     const double* phi,
							     const double* n,
							     const double* kappa,
							     const double *p,
							     const double *grad_p,
							     const double *u,
							     const double *v,
							     const double *porosity,
							     double *mom_u_acc,
							     double *dmom_u_acc_u,
							     double *mom_v_acc,
							     double *dmom_v_acc_v,
							     double *mass_adv,
							     double *dmass_adv_u,
							     double *dmass_adv_v,
							     double *mom_u_adv,
							     double *dmom_u_adv_u,
							     double *dmom_u_adv_v,
							     double *mom_v_adv,
							     double *dmom_v_adv_u,
							     double *dmom_v_adv_v,
							     double *mom_u_diff_ten,
							     double *mom_v_diff_ten,
							     double *mom_uv_diff_ten,
							     double *mom_vu_diff_ten,
							     double *mom_u_source,
							     double *mom_v_source,
							     double *dmom_u_source_u,
							     double *dmom_u_source_v,
							     double *dmom_v_source_u,
							     double *dmom_v_source_v,
							     double *mom_u_ham,
							     double *dmom_u_ham_grad_p,
							     double *mom_v_ham,
							     double *dmom_v_ham_grad_p);

extern
void VolumeAveragedVOFCoefficientsEvaluate(int nPoints,
					   int nSpace,
					   double eps,
					   double* v,
					   double* phi,
					   double* porosity,
					   double* u,
					   double* m,
					   double* dm,
					   double* f,
					   double* df);
extern void unitSquareVortexEvaluate(
  const int nPoints,
  const int nSpace,
  double t,
  const double *x,
  const double *u,
  double *m,
  double *dm,
  double *f,
  double *df
);
extern void constantVelocityLevelSetEvaluate(
  const int nPoints,
  const int nSpace,
  const double *b,
  const double *x,
  const double *u,
  const double *gradu,
  double *m,
  double *dm,
  double *f,
  double *df,
  double *H,
  double *dH
);
extern void constantNormalVelocityLevelSetEvaluate(
  const int nPoints,
  const int nSpace,
  double b,
  const double *x,
  const double *u,
  const double *gradu,
  double *m,
  double *dm,
  double *f,
  double *df,
  double *H,
  double *dH
);
extern void unitSquareVortexLevelSetEvaluate(
  const int nPoints,
  const int nSpace,
  double t,
  const double *x,
  const double *u,
  const double *gradu,
  double *m,
  double *dm,
  double *f,
  double *df,
  double *H,
  double *dH
);
extern void unitSquareRotationLevelSetEvaluate(
  const int nPoints,
  const int nSpace,
  double t,
  const double *x,
  const double *u,
  const double *gradu,
  double *m,
  double *dm,
  double *f,
  double *df,
  double *H,
  double *dH
);
extern void FractionalFlowPhaseForm_saturationEvaluate(const int nPoints,
                                                       const int nSpace,
                                                       const int nc,
                                                       const int pskModelFlag,
                                                       const double Kbar,
                                                       const double rhon,
                                                       const double rhow,
                                                       const double *g,
                                                       const double g_norm,
                                                       const double alpha,
                                                       const double bc_lambda,
                                                       const double bc_pd,
                                                       const double mvg_n,
                                                       const double mvg_m,
                                                       const double omega,
                                                       const double mun,
                                                       const double muw,
                                                       const double sw_min,
                                                       const double sw_max,
                                                       const double M,
                                                       const double R,
                                                       const double Temp,
                                                       const double p_o,
                                                       const double b,
                                                       double *u,
                                                       double *m,
                                                       double *dm,
                                                       double *phi,
                                                       double *dphi,
                                                       double *f,
                                                       double *df,
                                                       double *a,
                                                       double *da,
                                                       double *q_t,
                                                       double *psiw
                                                       );
extern void FractionalFlowPhaseForm_potentialEvaluate(const int nPoints,
                                                      const int nSpace,
                                                      const int nc,
                                                      const int pskModelFlag,
                                                      const double Kbar,
                                                      const double rhon,
                                                      const double rhow,
                                                      const double *g,
                                                      const double g_norm,
                                                      const double alpha,
                                                      const double bc_lambda,
                                                      const double bc_pd,
                                                      const double mvg_n,
                                                      const double mvg_m,
                                                      const double omega,
                                                      const double mun,
                                                      const double muw,
                                                      const double sw_min,
                                                      const double sw_max,
                                                      const double M,
                                                      const double R,
                                                      const double Temp,
                                                      const double p_o,
                                                      const double b,
                                                      double *u,
                                                      double *m,
                                                      double *dm,
                                                      double *phi,
                                                      double *dphi,
                                                      double *f,
                                                      double *df,
                                                      double *a,
                                                      double *da,
                                                      double *s_w,
                                                      double *grad_psic);
extern void FractionalFlowPhaseForm_saturationHetEvaluate(const int nPoints,
                                                          const int nSpace,
                                                          const int nc,
                                                          const int pskModelFlag,
                                                          const double *Kbar,
                                                          const double rhon,
                                                          const double rhow,
                                                          const double *g,
                                                          const double *alpha,
                                                          const double *bc_lambda,
                                                          const double *bc_pd,
                                                          const double *mvg_m,
                                                          const double *thetaS,
                                                          const double *thetaR,
                                                          const double mun,
                                                          const double muw,
                                                          const double b,
                                                          double *u,
                                                          double *m,
                                                          double *dm,
                                                          double *phi,
                                                          double *dphi,
                                                          double *f,
                                                          double *df,
                                                          double *a,
                                                          double *da,
                                                          double *q_t);
extern void FractionalFlowPhaseForm_potentialHetEvaluate(const int nPoints,
                                                         const int nSpace,
                                                         const int nc,
                                                         const int pskModelFlag,
                                                         const double *Kbar,
                                                         const double rhon,
                                                         const double rhow,
                                                         const double *g,
                                                         const double *alpha,
                                                         const double *bc_lambda,
                                                         const double *bc_pd,
                                                         const double *mvg_m,
                                                         const double *thetaS,
                                                         const double *thetaR,
                                                         const double mun,
                                                         const double muw,
                                                         const double b,
                                                         double *u,
                                                         double *m,
                                                         double *dm,
                                                         double *phi,
                                                         double *dphi,
                                                         double *f,
                                                         double *df,
                                                         double *a,
                                                         double *da,
                                                         double *s_w,
                                                         double *grad_psic);
extern void TwophaseDarcyFC_Evaluate(
  const int nPoints,
  const int nSpace,
  const int pskModelFlag,
  const double Kbar,
  const double rhon,
  const double rhow,
  const double *g,
  const double *x,
  const double alpha,
  const double bc_lambda,
  const double bc_pd,
  const double mvg_n,
  const double mvg_m,
  const double omega,
  const double omega_r,
  const double mun,
  const double muw,
  const double b,
  double *sw,
  double *psiw,
  double *mw,
  double *dmw,
  double *mn,
  double *dmn,
  double *phi_psiw,
  double *dphi_psiw_dpsiw,
  double *phi_psin,
  double *dphi_psin_dpsiw,
  double *dphi_psin_dsw,
  double *fw,
  double *dfw,
  double *fn,
  double *dfn,
  double *aw,
  double *daw,
  double *an,
  double *dan
);
extern void TwophaseFFDarcyFC_Evaluate(
  const int nPoints,
  const int nSpace,
  const int pskModelFlag,
  const double Kbar,
  const double rhon,
  const double rhow,
  const double *g,
  const double *x,
  const double alpha,
  const double bc_lambda,
  const double bc_pd,
  const double mvg_n,
  const double mvg_m,
  const double omega,
  const double omega_r,
  const double mun,
  const double muw,
  const double b,
  double *sw,
  double *psiw,
  double *mw,
  double *dmw_dsw,
  double *mm,
  double *dmm_dsw,
  double *phi_psic,
  double *dphi_psic_dsw,
  double *phi_psiw,
  double *dphi_psiw_dpsiw,
  double *fm,
  double *dfm_dsw,
  double *aw_psiw,
  double *daw_psiw_dsw,
  double *am_psiw,
  double *dam_psiw_dsw,
  double *am_psic,
  double *dam_psic_dsw
);
extern void TwophaseDarcyFCHet_Evaluate(
  const int nPoints,
  const int nSpace,
  const int pskModelFlag,
  const double *Kbar,
  const double rhon,
  const double rhow,
  const double *g,
  const double *x,
  const double *alpha,
  const double *bc_lambda,
  const double *bc_pd,
  const double *mvg_m,
  const double *omega,
  const double *omega_r,
  const double mun,
  const double muw,
  const double b,
  double *sw,
  double *psiw,
  double *mw,
  double *dmw,
  double *mn,
  double *dmn,
  double *phi_psiw,
  double *dphi_psiw_dpsiw,
  double *phi_psin,
  double *dphi_psin_dpsiw,
  double *dphi_psin_dsw,
  double *fw,
  double *dfw,
  double *fn,
  double *dfn,
  double *aw,
  double *daw,
  double *an,
  double *dan
);
extern void TwophaseFFDarcyFCHet_Evaluate(
  const int nPoints,
  const int nSpace,
  const int pskModelFlag,
  const double *Kbar,
  const double rhon,
  const double rhow,
  const double *g,
  const double *x,
  const double *alpha,
  const double *bc_lambda,
  const double *bc_pd,
  const double *mvg_m,
  const double *omega,
  const double *omega_r,
  const double mun,
  const double muw,
  const double b,
  double *sw,
  double *psiw,
  double *mw,
  double *dmw_dsw,
  double *mm,
  double *dmm_dsw,
  double *phi_psic,
  double *dphi_psic_dsw,
  double *phi_psiw,
  double *dphi_psiw_dpsiw,
  double *fm,
  double *dfm_dsw,
  double *aw_psiw,
  double *daw_psiw_dsw,
  double *am_psiw,
  double *dam_psiw_dsw,
  double *am_psic,
  double *dam_psic_dsw
);
extern void LinearElasticity_1D_Evaluate(
  const int nPoints,
  const double E,
  const double nu,
  const double *g,
  const double *u,
  double *uu_diff_ten,
  double *u_force
);
extern void LinearElasticity_2D_Evaluate(
  const int nPoints,
  const double E,
  const double nu,
  const double *g,
  const double *u,
  const double *v,
  double *uu_diff_ten,
  double *uv_diff_ten,
  double *vu_diff_ten,
  double *vv_diff_ten,
  double *u_force,
  double *v_force
);
extern void LinearElasticity_3D_Evaluate(
  const int nPoints,
  const double E,
  const double nu,
  const double *g,
  const double *u,
  const double *v,
  const double *w,
  double *uu_diff_ten,
  double *uv_diff_ten,
  double *uw_diff_ten,
  double *vu_diff_ten,
  double *vv_diff_ten,
  double *vw_diff_ten,
  double *wu_diff_ten,
  double *wv_diff_ten,
  double *ww_diff_ten,
  double *u_force,
  double *v_force,
  double *w_force
);
extern void levelSetConservationCoefficientsEvaluate(int nPoints,
                                                     int nSpace,
                                                     double epsHeaviside,
                                                     double epsDirac,
                                                     double epsDiffusion,
                                                     double* u_ls,
                                                     double* H_vof,
                                                     double* u,
                                                     double* r,
                                                     double* dr,
                                                     double* a);


extern void unitCubeRotationEvaluate(const int nPoints,
				     const int nSpace,
				     const double *x,
				     const double *u,
				     double *m,
				     double *dm,
				     double *f,
				     double *df);

extern void evaluateBuckleyLeverettLiuExample(int nPoints,
					      int nSpace,
					      const double * x,
					      const double * u,
					      double * m,
					      double * dm,
					      double * f,
					      double * df,
					      double * a);


extern void eikonalEquationEvaluate(int nPoints,
				    int nSpace,
				    double rhs,
				    double* u,
				    double* grad_u,
				    double* m,
				    double* dm,
				    double* H,
				    double* dH,
				    double* r);

extern void burgersDiagonalVelHJEvaluate(const int nPoints,
					 const int nSpace,
					 const double self_a,
					 const double *self_v,
					 const double *u,
					 const double *grad_u,
					 double *m,
					 double *dm,
					 double *H,
					 double *dH,
					 double *a,
					 double *phi,
					 double *dphi);

extern void HJBurgersEvaluate(const int nPoints,
			      const int nSpace,
			      const double offset,
			      const double *u,
			      const double *gradu,
			      double *m,
			      double *dm,
			      double *H,
			      double *dH);
extern void kEpsilon_2D_Evaluate(int nPoints,
				 int nSpace,
				 double sigma_k,
				 double sigma_e,
				 double c_1,
				 double c_2,
				 double c_mu,
				 double c_e,
				 double nu,
				 double *velocity,
				 double *gradu,
				 double *gradv,
				 double *k,
				 double *epsilon,
				 double *m_k,
				 double *dm_k,
				 double *m_e,
				 double *dm_e,
				 double *phi_k,
				 double *dphi_k,
				 double *phi_e,
				 double *dphi_e,
				 double *f_k,
				 double *df_k,
				 double *f_e,
				 double *df_e,
				 double *a_k,
				 double *da_k_dk,
				 double *da_k_de,
				 double *a_e,
				 double *da_e_dk,
				 double *da_e_de,
				 double *r_k,
				 double *dr_k_dk,
				 double *dr_k_de,
				 double *r_e,
				 double *dr_e_dk,
				 double *dr_e_de);

extern void ReynoldsAveragedNavierStokes_kEpsilon_2D_Evaluate(const int nPoints,
							      const double rho,
							      const double nu,
							      const double c_mu,
							      const double* k,
							      const double* grad_k,
							      const double* epsilon,
							      const double* g,
							      const double *p,
							      const double *grad_p,
							      const double *u,
							      const double *v,
							      double *mom_u_acc,
							      double *dmom_u_acc_u,
							      double *mom_v_acc,
							      double *dmom_v_acc_v,
							      double *mass_adv,
							      double *dmass_adv_u,
							      double *dmass_adv_v,
							      double *mom_u_adv,
							      double *dmom_u_adv_u,
							      double *dmom_u_adv_v,
							      double *mom_v_adv,
							      double *dmom_v_adv_u,
							      double *dmom_v_adv_v,
							      double *mom_u_diff_ten,
							      double *mom_v_diff_ten,
							      double *mom_uv_diff_ten,
							      double *mom_vu_diff_ten,
							      double *mom_u_source,
							      double *mom_v_source,
							      double *mom_u_ham,
							      double *dmom_u_ham_grad_p,
							      double *mom_v_ham,
							      double *dmom_v_ham_grad_p);
		       
extern
void ThreephaseNavierStokes_ST_LS_SO_3D_Evaluate(const int nPoints,
						 const double boundaryPenaltyCoef,
						 const double volumePenaltyCoef,
						 const double eps_rho,
						 const double eps_mu,
						 const double sigma,
						 const double rho_0,
						 const double nu_0,
						 const double rho_1,
						 const double nu_1,
						 const double rho_s,
						 const double nu_s,
						 const double* g,
						 const double* phi,
						 const double* n,
						 const double* kappa,
						 const double* phi_s,
						 const double* n_s,
						 const double *p,
						 const double *grad_p,
						 const double *u,
						 const double *v,
						 const double *w,
						 double *mom_u_acc,
						 double *dmom_u_acc_u,
						 double *mom_v_acc,
						 double *dmom_v_acc_v,
						 double *mom_w_acc,
						 double *dmom_w_acc_w,
						 double *mass_adv,
						 double *dmass_adv_u,
						 double *dmass_adv_v,
						 double *dmass_adv_w,
						 double *mom_u_adv,
						 double *dmom_u_adv_u,
						 double *dmom_u_adv_v,
						 double *dmom_u_adv_w,
						 double *mom_v_adv,
						 double *dmom_v_adv_u,
						 double *dmom_v_adv_v,
						 double *dmom_v_adv_w,
						 double *mom_w_adv,
						 double *dmom_w_adv_u,
						 double *dmom_w_adv_v,
						 double *dmom_w_adv_w,
						 double *mom_u_diff_ten,
						 double *mom_v_diff_ten,
						 double *mom_w_diff_ten,
						 double *mom_uv_diff_ten,
						 double *mom_uw_diff_ten,
						 double *mom_vu_diff_ten,
						 double *mom_vw_diff_ten,
						 double *mom_wu_diff_ten,
						 double *mom_wv_diff_ten,
						 double *mom_u_source,
						 double *dmom_u_source_u,
						 double *dmom_u_source_v,
						 double *dmom_u_source_w,
						 double *mom_v_source,
						 double *dmom_v_source_u,
						 double *dmom_v_source_v,
						 double *dmom_v_source_w,
						 double *mom_w_source,
						 double *dmom_w_source_u,
						 double *dmom_w_source_v,
						 double *dmom_w_source_w,
						 double *mom_u_ham,
						 double *dmom_u_ham_grad_p,
						 double *mom_v_ham,
						 double *dmom_v_ham_grad_p,
						 double *mom_w_ham,
						 double *dmom_w_ham_grad_p);

/* int findInterval(const double* vertices, int nv, double x, int* ival, double tol); */

/* void piecewiseLinearTableLookup(double x, */
/* 				int nv, */
/* 				int* start, */
/* 				double* y, */
/* 				double* dy, */
/* 				const double* xv, */
/* 				const double* yv); */
extern void groundwaterBiodegradation01EvaluateFC(const int nPoints,
					   const int nSpace,
					   const double omega,
					   const double d_c,
					   const double d_e,
					   const double alpha_L,
					   const double alpha_T,
					   const double Kox_max,
					   const double Kox_C,
					   const double Kox_E,
					   const double Kox_X,
					   const double Yield,
					   const double k_d,
					   const double *v,
					   const double *c_c,
					   const double *c_e,
					   const double *c_x,
					   double *m_c,
					   double *dm_c,
					   double *m_e,
					   double *dm_e,
					   double *m_x,
					   double *dm_x,
					   double *f_c,
					   double *df_c,
					   double *f_e,
					   double *df_e,
					   double *a_c,
					   double *a_e,
					   double *r_c,
					   double *dr_c_dc,
					   double *dr_c_de,
					   double *dr_c_dx,
					   double *r_e,
					   double *dr_e_dc,
					   double *dr_e_de,
					   double *dr_e_dx,
					   double *r_x,
					   double *dr_x_dc,
					   double *dr_x_de,
						  double *dr_x_dx);
extern void groundwaterBryantDawsonIonExEvaluateFC(const int nPoints,
					    const int nSpace,
					    const double omega,
					    const double d_m,
					    const double d_h,
					    const double alpha_L,
					    const double alpha_T,
					    const double K_m,
					    const double K_h,
					    const double K_w,
					    const double Z_tot,
					    const double *v,
					    const double *c_m,
					    const double *c_h,
					    double *m_m,
					    double *dm_m_m,
					    double *dm_m_h,
					    double *m_h,
					    double *dm_h_m,
					    double *dm_h_h,
					    double *f_m,
					    double *df_m,
					    double *f_h,
					    double *df_h,
					    double *a_m,
					    double *a_h,
					    double *phi_h,
					    double *dphi_h,
					    double *r_m,
					    double *dr_m_dm,
					    double *dr_m_dh,
					    double *r_h,
					    double *dr_h_dm,
						   double *dr_h_dh);

extern void groundwaterTransportCoefficientsEvaluate_hetMat(const int nSimplex,
						     const int nPointsPerSimplex,
						     const int nSpace,
						     const double d,
						     const int* materialTypes,
						     const double *omega_types,
						     const double *alpha_L_types,
						     const double *alpha_T_types,
						     const double *v,
						     const double *u,
						     double *m,
						     double *dm,
						     double *f,
						     double *df,
							    double *a);

extern void variablySaturatedGroundwaterTransportCoefficientsEvaluate_hetMat(const int nSimplex,
								      const int nPointsPerSimplex,
								      const int nSpace,
								      const double d,
								      const int* materialTypes,
								      const double *theta, /*phase volume fraction*/
								      const double *alpha_L_types,
								      const double *alpha_T_types,
								      const double *v,/*phase darcy velocity*/
								      const double *u,
								      double *m,
								      double *dm,
								      double *f,
								      double *df,
									     double *a);

extern void redistanceLevelSetCoefficientsWithWeakPenaltyEvaluate(int nPoints,
							   int nSpace,
							   double eps,
							   double lambda_penalty,
							   double* u_levelSet,
							   double* u,
							   double* grad_u,
							   double* m,
							   double* dm,
							   double* H,
							   double* dH,
							   double* r,
								  double* dr);

extern void setWeakDirichletConditionsForLevelSet(int nElements_global,
					   int nDOF_trial_element,
					   double epsilon_freeze_factor,
					   const double *elementDiameter,
					   const int * u_l2g,
					   const double *u_dof,
					   int * freeze_nodes_tmp,
						  int * weakDirichletConditionFlags);

extern void StokesP_3D_Evaluate(const int nPoints,
                         const double rho,
                         const double nu,
                         const double *g,
                         const double *p,
                         const double *u,
                         const double *v,
                         const double *w,
                         double *mom_u_acc,
                         double *dmom_u_acc_u,
                         double *mom_v_acc,
                         double *dmom_v_acc_v,
			 double *mom_w_acc,
			 double *dmom_w_acc_w,
                         double *mass_adv,
                         double *dmass_adv_u,
                         double *dmass_adv_v,
			 double *dmass_adv_w,
                         double *mom_u_adv,
                         double *dmom_u_adv_p,
                         double *mom_v_adv,
                         double *dmom_v_adv_p,
			 double *mom_w_adv,
			 double *dmom_w_adv_p,
                         double *mom_u_diff_ten,
                         double *mom_v_diff_ten,
			 double *mom_w_diff_ten,
                         double *mom_u_source,
                         double *mom_v_source,
				     double *mom_w_source);

extern void TwophaseNavierStokes_ST_LS_SO_2D_Evaluate_sd(const int nPoints,
                                                  const double eps_rho,
                                                  const double eps_mu,
                                                  const double sigma,
                                                  const double rho_0,
                                                  const double nu_0,
                                                  const double rho_1,
                                                  const double nu_1,
                                                  const double* g,
                                                  const double* phi,
                                                  const double* n,
                                                  const double* kappa,
                                                  const double *p,
                                                  const double *grad_p,
                                                  const double *u,
                                                  const double *v,
                                                  double *mom_u_acc,
                                                  double *dmom_u_acc_u,
                                                  double *mom_v_acc,
                                                  double *dmom_v_acc_v,
                                                  double *mass_adv,
                                                  double *dmass_adv_u,
                                                  double *dmass_adv_v,
                                                  double *mom_u_adv,
                                                  double *dmom_u_adv_u,
                                                  double *dmom_u_adv_v,
                                                  double *mom_v_adv,
                                                  double *dmom_v_adv_u,
                                                  double *dmom_v_adv_v,
                                                  double *mom_u_diff_ten,
                                                  double *mom_v_diff_ten,
                                                  double *mom_uv_diff_ten,
                                                  double *mom_vu_diff_ten,
                                                  double *mom_u_source,
                                                  double *mom_v_source,
                                                  double *mom_u_ham,
                                                  double *dmom_u_ham_grad_p,
                                                  double *mom_v_ham,
							 double *dmom_v_ham_grad_p);

extern void ThreephaseNavierStokes_ST_LS_SO_2D_Evaluate(const int nPoints,
						 const double boundaryPenaltyCoef,
						 const double volumePenaltyCoef,
						 const double eps_rho,
						 const double eps_mu,
						 const double sigma,
						 const double rho_0,
						 const double nu_0,
						 const double rho_1,
						 const double nu_1,
						 const double rho_s,
						 const double nu_s,
						 const double* g,
						 const double* phi,
						 const double* n,
						 const double* kappa,
						 const double* phi_s,
						 const double* n_s,
						 const double *p,
						 const double *grad_p,
						 const double *u,
						 const double *v,
						 double *mom_u_acc,
						 double *dmom_u_acc_u,
						 double *mom_v_acc,
						 double *dmom_v_acc_v,
						 double *mass_adv,
						 double *dmass_adv_u,
						 double *dmass_adv_v,
						 double *mom_u_adv,
						 double *dmom_u_adv_u,
						 double *dmom_u_adv_v,
						 double *mom_v_adv,
						 double *dmom_v_adv_u,
						 double *dmom_v_adv_v,
						 double *mom_u_diff_ten,
						 double *mom_v_diff_ten,
						 double *mom_uv_diff_ten,
						 double *mom_vu_diff_ten,
						 double *mom_u_source,
						 double *dmom_u_source_u,
						 double *dmom_u_source_v,
						 double *mom_v_source,
						 double *dmom_v_source_u,
						 double *dmom_v_source_v,
						 double *mom_u_ham,
						 double *dmom_u_ham_grad_p,
						 double *mom_v_ham,
							double *dmom_v_ham_grad_p);
void TwophaseNavierStokes_ST_LS_SO_3D_Evaluate_sd(const int nPoints,
                                                  const double eps_rho,
                                                  const double eps_mu,
                                                  const double sigma,
                                                  const double rho_0,
                                                  const double nu_0,
                                                  const double rho_1,
                                                  const double nu_1,
                                                  const double* g,
                                                  const double* phi,
                                                  const double* n,
                                                  const double* kappa,
                                                  const double *p,
                                                  const double *grad_p,
                                                  const double *u,
                                                  const double *v,
                                                  const double *w,
                                                  double *mom_u_acc,
                                                  double *dmom_u_acc_u,
                                                  double *mom_v_acc,
                                                  double *dmom_v_acc_v,
                                                  double *mom_w_acc,
                                                  double *dmom_w_acc_w,
                                                  double *mass_adv,
                                                  double *dmass_adv_u,
                                                  double *dmass_adv_v,
                                                  double *dmass_adv_w,
                                                  double *mom_u_adv,
                                                  double *dmom_u_adv_u,
                                                  double *dmom_u_adv_v,
                                                  double *dmom_u_adv_w,
                                                  double *mom_v_adv,
                                                  double *dmom_v_adv_u,
                                                  double *dmom_v_adv_v,
                                                  double *dmom_v_adv_w,
                                                  double *mom_w_adv,
                                                  double *dmom_w_adv_u,
                                                  double *dmom_w_adv_v,
                                                  double *dmom_w_adv_w,
                                                  double *mom_u_diff_ten,
                                                  double *mom_v_diff_ten,
                                                  double *mom_w_diff_ten,
                                                  double *mom_uv_diff_ten,
                                                  double *mom_uw_diff_ten,
                                                  double *mom_vu_diff_ten,
                                                  double *mom_vw_diff_ten,
                                                  double *mom_wu_diff_ten,
                                                  double *mom_wv_diff_ten,
                                                  double *mom_u_source,
                                                  double *mom_v_source,
                                                  double *mom_w_source,
                                                  double *mom_u_ham,
                                                  double *dmom_u_ham_grad_p,
                                                  double *mom_v_ham,
                                                  double *dmom_v_ham_grad_p,
                                                  double *mom_w_ham,
                                                  double *dmom_w_ham_grad_p);
extern void conservativeHeadRichardsMualemVanGenuchten_sd_het_linearized_at_saturation(const int nSimplex,
										const int nPointsPerSimplex,
										const int nSpace,
										double linear_break,
										const int * rowptr,
										const int * colind,
										const int* materialTypes,
										const double rho,
										const double beta,
										const double* gravity,
										const double* alpha,
										const double* n,
										const double* thetaR,
										const double* thetaSR,
										const double* KWs,
										double *u,
										double *mass,
										double *dmass,
										double *f,
										double *df,
										double *a,
										double *da,
										       double* vol_frac);
extern void conservativeHeadRichardsMualemVanGenuchten_sd_het(const int nSimplex,
						       const int nPointsPerSimplex,
						       const int nSpace,
						       double pc_eps,
						       const int * rowptr,
						       const int * colind,
						       const int* materialTypes,
						       const double rho,
						       const double beta,
						       const double* gravity,
						       const double* alpha,
						       const double* n,
						       const double* thetaR,
						       const double* thetaSR,
						       const double* KWs,
						       double *u,
						       double *mass,
						       double *dmass,
						       double *f,
						       double *df,
						       double *a,
						       double *da,
							      double* vol_frac);
extern void seepageBrezis(const int nSimplex,
		   const int nPointsPerSimplex,
		   const int nSpace,
		   const int* materialTypes,
		   const double epsFact,
		   const double rho,
		   const double beta,
		   const double* elementDiameter,
		   const double* gravity,
		   const double* alpha,
		   const double* n,
		   const double* thetaR,
		   const double* thetaSR,
		   const double* KWs,
		   double *u,
		   double *mass,
		   double *dmass,
		   double *f,
		   double *df,
		   double *a,
			  double *da);
extern void MovingMesh_1D_Evaluate(const int nPoints,
			    const double E0,
			    const double nu,
			    const double *g,
			    const double *det_J,
			    const double *u,
			    double *uu_diff_ten,
				   double *u_force);
extern void MovingMesh_2D_Evaluate(const int nPoints,
			    const double E0,
			    const double nu,
			    const double *g,
			    const double *det_J,
			    const double *u,
			    const double *v,
			    double *uu_diff_ten,double *uv_diff_ten,
			    double *vu_diff_ten,double *vv_diff_ten,
			    double *u_force,
				   double *v_force);
extern void MovingMesh_3D_Evaluate(const int nPoints,
			    const double E0,
			    const double nu,
			    const double *g,
			    const double *det_J,
			    const double *u,
			    const double *v,
			    const double *w,
			    double *uu_diff_ten,double *uv_diff_ten,double *uw_diff_ten,
			    double *vu_diff_ten,double *vv_diff_ten,double *vw_diff_ten,
			    double *wu_diff_ten,double *wv_diff_ten,double *ww_diff_ten,
			    double *u_force,
			    double *v_force,
				   double *w_force);

extern void levelSetConservationCoefficientsEvaluate_sd(int nPoints,
						 double epsHeaviside,
						 double epsDirac,
						 double* u_ls,
						 double* H_vof,
						 double* u,
						 double* r,
						 double* dr);
extern void variablySaturatedGroundwaterEnergyTransportCoefficientsEvaluate_hetMat(const int nSimplex,
									    const int nPointsPerSimplex,
									    const int nSpace,
									    const double rho_w,
									    const double rho_n,
									    const double specificHeat_w,
									    const double specificHeat_n,
									    const int* materialTypes,
									    const double *theta, /*phase volume fraction*/
									    const double *thetaS_types,
									    const double *alpha_L_types,
									    const double *alpha_T_types,
									    const double *rho_s_types,
									    const double *specificHeat_s_types,
									    const double *lambda_sat_types,
									    const double *lambda_dry_types,
									    const double *lambda_aniso_types,
									    const double *v,/*phase darcy velocity*/
									    const double *u,
									    double *m,
									    double *dm,
									    double *f,
									    double *df,
										   double *a);

extern void setSimpleWeakDirichletConditionsForLevelSet(int nElements_global,
                                                 int nDOF_trial_element,
                                                 double epsilon_freeze_factor,
                                                 const double *elementDiameter,
                                                 const int * u_l2g,
                                                 const double *u_dof,
                                                 int * freeze_nodes_tmp,
							int * weakDirichletConditionFlags);
extern void VolumeAveragedTwophaseNavierStokes_ST_LS_SO_2D_Evaluate(const int nPoints,
							     const int killNonlinearDrag,
							     const double eps_rho,
							     const double eps_mu,
							     const double sigma,
							     const double rho_0,
							     const double nu_0,
							     const double rho_1,
							     const double nu_1,
							     const double* meanGrainSize,
							     const double* g,
							     const double* phi,
							     const double* n,
							     const double* kappa,
							     const double *p,
							     const double *grad_p,
							     const double *u,
							     const double *v,
							     const double *porosity,
							     double *mom_u_acc,
							     double *dmom_u_acc_u,
							     double *mom_v_acc,
							     double *dmom_v_acc_v,
							     double *mass_adv,
							     double *dmass_adv_u,
							     double *dmass_adv_v,
							     double *mom_u_adv,
							     double *dmom_u_adv_u,
							     double *dmom_u_adv_v,
							     double *mom_v_adv,
							     double *dmom_v_adv_u,
							     double *dmom_v_adv_v,
							     double *mom_u_diff_ten,
							     double *mom_v_diff_ten,
							     double *mom_uv_diff_ten,
							     double *mom_vu_diff_ten,
							     double *mom_u_source,
							     double *mom_v_source,
							     double *dmom_u_source_u,
							     double *dmom_u_source_v,
							     double *dmom_v_source_u,
							     double *dmom_v_source_v,
							     double *mom_u_ham,
							     double *dmom_u_ham_grad_p,
							     double *mom_v_ham,
								    double *dmom_v_ham_grad_p);
extern void VolumeAveragedTwophaseNavierStokes_ST_LS_SO_3D_Evaluate(const int nPoints,
							     const int killNonlinearDrag,
							     const double eps_rho,
							     const double eps_mu,
							     const double sigma,
							     const double rho_0,
							     const double nu_0,
							     const double rho_1,
							     const double nu_1,
							     const double* meanGrainSize,
							     const double* g,
							     const double* phi,
							     const double* n,
							     const double* kappa,
							     const double *p,
							     const double *grad_p,
							     const double *u,
							     const double *v,
							     const double *w,
							     const double *porosity,
							     double *mom_u_acc,
							     double *dmom_u_acc_u,
							     double *mom_v_acc,
							     double *dmom_v_acc_v,
							     double *mom_w_acc,
							     double *dmom_w_acc_w,
							     double *mass_adv,
							     double *dmass_adv_u,
							     double *dmass_adv_v,
							     double *dmass_adv_w,
							     double *mom_u_adv,
							     double *dmom_u_adv_u,
							     double *dmom_u_adv_v,
							     double *dmom_u_adv_w,
							     double *mom_v_adv,
							     double *dmom_v_adv_u,
							     double *dmom_v_adv_v,
							     double *dmom_v_adv_w,
							     double *mom_w_adv,
							     double *dmom_w_adv_u,
							     double *dmom_w_adv_v,
							     double *dmom_w_adv_w,
							     double *mom_u_diff_ten,
							     double *mom_v_diff_ten,
							     double *mom_w_diff_ten,
							     double *mom_uv_diff_ten,
							     double *mom_uw_diff_ten,
							     double *mom_vu_diff_ten,
							     double *mom_vw_diff_ten,
							     double *mom_wu_diff_ten,
							     double *mom_wv_diff_ten,
							     double *mom_u_source,
							     double *mom_v_source,
							     double *mom_w_source,
							     double *dmom_u_source_u,
							     double *dmom_u_source_v,
							     double *dmom_u_source_w,
							     double *dmom_v_source_u,
							     double *dmom_v_source_v,
							     double *dmom_v_source_w,
							     double *dmom_w_source_u,
							     double *dmom_w_source_v,
							     double *dmom_w_source_w,
							     double *mom_u_ham,
							     double *dmom_u_ham_grad_p,
							     double *mom_v_ham,
							     double *dmom_v_ham_grad_p,
							     double *mom_w_ham,
								    double *dmom_w_ham_grad_p);
extern void VolumeAveragedTwophaseNavierStokes_ST_LS_SO_3D_Evaluate_sd(const int nPoints,
							     const int killNonlinearDrag,
							     const double eps_rho,
							     const double eps_mu,
							     const double sigma,
							     const double rho_0,
							     const double nu_0,
							     const double rho_1,
							     const double nu_1,
							     const double* meanGrainSize,
							     const double* g,
							     const double* phi,
							     const double* n,
							     const double* kappa,
							     const double *p,
							     const double *grad_p,
							     const double *u,
							     const double *v,
							     const double *w,
							     const double *porosity,
							     double *mom_u_acc,
							     double *dmom_u_acc_u,
							     double *mom_v_acc,
							     double *dmom_v_acc_v,
							     double *mom_w_acc,
							     double *dmom_w_acc_w,
							     double *mass_adv,
							     double *dmass_adv_u,
							     double *dmass_adv_v,
							     double *dmass_adv_w,
							     double *mom_u_adv,
							     double *dmom_u_adv_u,
							     double *dmom_u_adv_v,
							     double *dmom_u_adv_w,
							     double *mom_v_adv,
							     double *dmom_v_adv_u,
							     double *dmom_v_adv_v,
							     double *dmom_v_adv_w,
							     double *mom_w_adv,
							     double *dmom_w_adv_u,
							     double *dmom_w_adv_v,
							     double *dmom_w_adv_w,
							     double *mom_u_diff_ten,
							     double *mom_v_diff_ten,
							     double *mom_w_diff_ten,
							     double *mom_uv_diff_ten,
							     double *mom_uw_diff_ten,
							     double *mom_vu_diff_ten,
							     double *mom_vw_diff_ten,
							     double *mom_wu_diff_ten,
							     double *mom_wv_diff_ten,
							     double *mom_u_source,
							     double *mom_v_source,
							     double *mom_w_source,
							     double *dmom_u_source_u,
							     double *dmom_u_source_v,
							     double *dmom_u_source_w,
							     double *dmom_v_source_u,
							     double *dmom_v_source_v,
							     double *dmom_v_source_w,
							     double *dmom_w_source_u,
							     double *dmom_w_source_v,
							     double *dmom_w_source_w,
							     double *mom_u_ham,
							     double *dmom_u_ham_grad_p,
							     double *mom_v_ham,
							     double *dmom_v_ham_grad_p,
							     double *mom_w_ham,
								       double *dmom_w_ham_grad_p);
extern void kEpsilon_2D_Evaluate(int nPoints,
			  int nSpace,
			  double sigma_k,
			  double sigma_e,
			  double c_1,
			  double c_2,
			  double c_mu,
			  double c_e,
			  double nu,
			  double *velocity,
			  double *gradu,
			  double *gradv,
			  double *k,
			  double *epsilon,
			  double *m_k,
			  double *dm_k,
			  double *m_e,
			  double *dm_e,
			  double *phi_k,
			  double *dphi_k,
			  double *phi_e,
			  double *dphi_e,
			  double *f_k,
			  double *df_k,
			  double *f_e,
			  double *df_e,
			  double *a_k,
			  double *da_k_dk,
			  double *da_k_de,
			  double *a_e,
			  double *da_e_dk,
			  double *da_e_de,
			  double *r_k,
			  double *dr_k_dk,
			  double *dr_k_de,
			  double *r_e,
			  double *dr_e_dk,
				 double *dr_e_de);

extern void kEpsilon_2D_Evaluate_sd(int nPoints,
			     int nSpace,
			     double sigma_k,
			     double sigma_e,
			     double c_1,
			     double c_2,
			     double c_mu,
			     double c_e,
			     double nu,
			     double *velocity,
			     double *gradu,
			     double *gradv,
			     double *k,
			     double *epsilon,
			     double *m_k,
			     double *dm_k,
			     double *m_e,
			     double *dm_e,
			     double *phi_k,
			     double *dphi_k,
			     double *phi_e,
			     double *dphi_e,
			     double *f_k,
			     double *df_k,
			     double *f_e,
			     double *df_e,
			     double *a_k,
			     double *da_k_dk,
			     double *da_k_de,
			     double *a_e,
			     double *da_e_dk,
			     double *da_e_de,
			     double *r_k,
			     double *dr_k_dk,
			     double *dr_k_de,
			     double *r_e,
			     double *dr_e_dk,
				    double *dr_e_de);
extern void kEpsilon_3D_Evaluate_sd(int nPoints,
			     int nSpace,
			     double sigma_k,
			     double sigma_e,
			     double c_1,
			     double c_2,
			     double c_mu,
			     double c_e,
			     double nu,
			     double *velocity,
			     double *gradu,
			     double *gradv,
			     double *gradw,
			     double *k,
			     double *epsilon,
			     double *m_k,
			     double *dm_k,
			     double *m_e,
			     double *dm_e,
			     double *phi_k,
			     double *dphi_k,
			     double *phi_e,
			     double *dphi_e,
			     double *f_k,
			     double *df_k,
			     double *f_e,
			     double *df_e,
			     double *a_k,
			     double *da_k_dk,
			     double *da_k_de,
			     double *a_e,
			     double *da_e_dk,
			     double *da_e_de,
			     double *r_k,
			     double *dr_k_dk,
			     double *dr_k_de,
			     double *r_e,
			     double *dr_e_dk,
				    double *dr_e_de);
extern void kEpsilon_3D_Evaluate(int nPoints,
			     int nSpace,
			     double sigma_k,
			     double sigma_e,
			     double c_1,
			     double c_2,
			     double c_mu,
			     double c_e,
			     double nu,
			     double *velocity,
			     double *gradu,
			     double *gradv,
			     double *gradw,
			     double *k,
			     double *epsilon,
			     double *m_k,
			     double *dm_k,
			     double *m_e,
			     double *dm_e,
			     double *phi_k,
			     double *dphi_k,
			     double *phi_e,
			     double *dphi_e,
			     double *f_k,
			     double *df_k,
			     double *f_e,
			     double *df_e,
			     double *a_k,
			     double *da_k_dk,
			     double *da_k_de,
			     double *a_e,
			     double *da_e_dk,
			     double *da_e_de,
			     double *r_k,
			     double *dr_k_dk,
			     double *dr_k_de,
			     double *r_e,
			     double *dr_e_dk,
				 double *dr_e_de);
extern void kEpsilon_k_2D_Evaluate_sd(int nPoints,
			       int nSpace,
			       double sigma_k,
			       double c_mu,
			       double nu,
			       double *velocity,
			       double *gradu,
			       double *gradv,
			       double *k,
			       double *epsilon,
			       double *m_k,
			       double *dm_k,
			       double *phi_k,
			       double *dphi_k,
			       double *f_k,
			       double *df_k,
			       double *a_k,
			       double *da_k_dk,
			       double *r_k,
				      double *dr_k_dk);

extern void kEpsilon_epsilon_2D_Evaluate_sd(int nPoints,
				     int nSpace,
				     double sigma_e,
				     double c_1,
				     double c_2,
				     double c_mu,
				     double c_e,
				     double nu,
				     double *velocity,
				     double *gradu,
				     double *gradv,
				     double *k,
				     double *epsilon,
				     double *m_e,
				     double *dm_e,
				     double *phi_e,
				     double *dphi_e,
				     double *f_e,
				     double *df_e,
				     double *a_e,
				     double *da_e_de,
				     double *r_e,
					    double *dr_e_de);

extern void kEpsilon_k_3D_Evaluate_sd(int nPoints,
			       int nSpace,
			       double sigma_k,
			       double c_mu,
			       double nu,
			       double *velocity,
			       double *gradu,
			       double *gradv,
			       double *gradw,
			       double *k,
			       double *epsilon,
			       double *m_k,
			       double *dm_k,
			       double *phi_k,
			       double *dphi_k,
			       double *f_k,
			       double *df_k,
			       double *a_k,
			       double *da_k_dk,
			       double *r_k,
				      double *dr_k_dk);

extern void kEpsilon_epsilon_3D_Evaluate_sd(int nPoints,
				     int nSpace,
				     double sigma_e,
				     double c_1,
				     double c_2,
				     double c_mu,
				     double c_e,
				     double nu,
				     double *velocity,
				     double *gradu,
				     double *gradv,
				     double *gradw,
				     double *k,
				     double *epsilon,
				     double *m_e,
				     double *dm_e,
				     double *phi_e,
				     double *dphi_e,
				     double *f_e,
				     double *df_e,
				     double *a_e,
				     double *da_e_de,
				     double *r_e,
					    double *dr_e_de);
extern void ReynoldsAveragedNavierStokes_kEpsilon_2D_Update(const int nPoints,
						     const double nu,
						     const double c_mu,
						     const double* k,
						     const double* grad_k,
						     const double* epsilon,
						     double *mom_u_diff_ten,
						     double *mom_v_diff_ten,
						     double *mom_uv_diff_ten,
						     double *mom_vu_diff_ten,
						     double *mom_u_source,
							    double *mom_v_source);
extern void ReynoldsAveragedNavierStokes_kEpsilon_2D_Update_sd(const int nPoints,
							const double rho,
							const double nu,
							const double c_mu,
							const double* k,
							const double* grad_k,
							const double* epsilon,
							double *mom_u_diff_ten,
							double *mom_v_diff_ten,
							double *mom_uv_diff_ten,
							double *mom_vu_diff_ten,
							double *mom_u_source,
							       double *mom_v_source);

extern void ReynoldsAveragedNavierStokes_kEpsilon_3D_Update(const int nPoints,
						     const double nu,
						     const double c_mu,
						     const double* k,
						     const double* grad_k,
						     const double* epsilon,
						     double *mom_u_diff_ten,
						     double *mom_v_diff_ten,
						     double *mom_w_diff_ten,
						     double *mom_uv_diff_ten,
						     double *mom_uw_diff_ten,
						     double *mom_vu_diff_ten,
						     double *mom_vw_diff_ten,
						     double *mom_wu_diff_ten,
						     double *mom_wv_diff_ten,
						     double *mom_u_source,
						     double *mom_v_source,
							    double *mom_w_source);

extern void ReynoldsAveragedNavierStokes_kEpsilon_3D_Update_sd(const int nPoints,
							const double nu,
							const double c_mu,
							const double* k,
							const double* grad_k,
							const double* epsilon,
							double *mom_u_diff_ten,
							double *mom_v_diff_ten,
							double *mom_w_diff_ten,
							double *mom_uv_diff_ten,
							double *mom_uw_diff_ten,
							double *mom_vu_diff_ten,
							double *mom_vw_diff_ten,
							double *mom_wu_diff_ten,
							double *mom_wv_diff_ten,
							double *mom_u_source,
							double *mom_v_source,
							       double *mom_w_source);

extern void scriptedSphereMotionSignedDistance(const int nPoints,
					const double t,
					const int nSpace,
					const int nSpheres,
					const double * radii,
					const double * centers,
					const double * x,
					double * phi,
					       double * n);

extern void shallowWater_1D_Evaluate(const int nPoints,
                              const double h_eps,
			      const double g,
			      const double bedFrictionCoefficient,
			      const double bedFrictionPower,
			      const double eddyViscosity,
			      const double* x, /*bathymetry elevation in index 1 (y)*/
			      const double* db_dx,/*db/dx (bed slope) */
			      const double* h,
			      const double* hu,
			      double *H,
			      double *mass_acc,
			      double *dmass_acc_dh,
			      double *mom_acc,
			      double *dmom_acc_dhu,
			      double *mass_adv,
			      double *dmass_adv_dhu,
			      double *mom_adv,
			      double *dmom_adv_dh,
			      double *dmom_adv_dhu,
			      double *mom_source,
			      double *dmom_source_dh,
			      double *dmom_source_dhu,
				     double *mom_diff);

extern void VolumeAveragedTwophaseNavierStokes_ST_LS_SO_2D_Evaluate_sd(const int nPoints,
								const int killNonlinearDrag,
								const double eps_rho,
								const double eps_mu,
								const double sigma,
								const double rho_0,
								const double nu_0,
								const double rho_1,
								const double nu_1,
								const double* meanGrainSize,
								const double* g,
								const double* phi,
								const double* n,
								const double* kappa,
								const double *p,
								const double *grad_p,
								const double *u,
								const double *v,
								const double *porosity,
								double *mom_u_acc,
								double *dmom_u_acc_u,
								double *mom_v_acc,
								double *dmom_v_acc_v,
								double *mass_adv,
								double *dmass_adv_u,
								double *dmass_adv_v,
								double *mom_u_adv,
								double *dmom_u_adv_u,
								double *dmom_u_adv_v,
								double *mom_v_adv,
								double *dmom_v_adv_u,
								double *dmom_v_adv_v,
								double *mom_u_diff_ten,
								double *mom_v_diff_ten,
								double *mom_uv_diff_ten,
								double *mom_vu_diff_ten,
								double *mom_u_source,
								double *mom_v_source,
								double *dmom_u_source_u,
								double *dmom_u_source_v,
								double *dmom_v_source_u,
								double *dmom_v_source_v,
								double *mom_u_ham,
								double *dmom_u_ham_grad_p,
								double *mom_v_ham,
								       double *dmom_v_ham_grad_p);
extern void shallowWater_2D_Evaluate(const int nPoints,
                              const double h_eps,
			      const double g,
			      const double bedFrictionCoefficient,
			      const double bedFrictionPower,
			      const double eddyViscosity,
			      const double* x, /*bathymetry elevation in index 2 (z)*/
			      const double* grad_b,/*\nabla b (bed slope) */
			      const double* h,
			      const double* hu,
			      const double* hv,
			      double *H,
			      double *mass_acc,
			      double *dmass_acc_dh,
			      double *mom_u_acc,
			      double *dmom_u_acc_dhu,
			      double *mom_v_acc,
			      double *dmom_v_acc_dhv,
			      double *mass_adv,
			      double *dmass_adv_dhu,
			      double *dmass_adv_dhv,
			      double *mom_u_adv,
			      double *dmom_u_adv_dh,
			      double *dmom_u_adv_dhu,
			      double *dmom_u_adv_dhv,
			      double *mom_v_adv,
			      double *dmom_v_adv_dh,
			      double *dmom_v_adv_dhu,
			      double *dmom_v_adv_dhv,
			      double *mom_u_diff,
			      double *mom_v_diff,
			      double *mom_u_source,
			      double *dmom_u_source_dh,
			      double *dmom_u_source_dhu,
			      double *dmom_u_source_dhv,
			      double *mom_v_source,
			      double *dmom_v_source_dh,
			      double *dmom_v_source_dhu,
				     double *dmom_v_source_dhv);
extern void conservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwind(const int upwindFlag,
								       const int computeAverages,
								       const int nSimplex,
								       const int nPointsPerSimplex,
								       const int nSpace,
								       const int nQuadraturePoints_elementBoundary,
								       const int* elementBoundaryElementsArray,
								       const int* quadraturePointToElementBoundary,
								       const int* materialTypes,
								       const double rho,
								       const double beta,
								       const double* gravity,
								       const double* alpha,
								       const double* n_vg,
								       const double* thetaR,
								       const double* thetaSR,
								       const double* KWs,
								       const double *u,
								       const double *gradu,
								       const double *n_global,
								       const double *dV,
								       double *mass,
								       double *dmass,
								       double *f_avg,
								       double *df_avg,
								       double *a_avg,
								       double *da_avg,
								       double *f,
								       double *df,
								       double *a,
									      double *da);
extern void conservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwindAndHarm(const int upwindFlag,
									      const int computeAverages,
									      const int nSimplex,
									      const int nPointsPerSimplex,
									      const int nSpace,
									      const int nQuadraturePoints_elementBoundary,
									      const int* elementBoundaryElementsArray,
									      const int* quadraturePointToElementBoundary,
									      const int* materialTypes,
									      const double rho,
									      const double beta,
									      const double* gravity,
									      const double* alpha,
									      const double* n_vg,
									      const double* thetaR,
									      const double* thetaSR,
									      const double* KWs,
									      const double *u,
									      const double *gradu,
									      const double *n_global,
									      const double *dV,
									      double *mass,
									      double *dmass,
									      double *f_avg,
									      double *df_avg,
									      double *a_avg,
									      double *da_avg,
									      double *f,
									      double *df,
									      double *a,
										     double *da);
extern void conservativeHeadRichardsMualemVanGenuchtenHetEvaluateV2withUpwindAndHarm_sd(const int upwindFlag,
										 const int computeAverages,
										 const int nSimplex,
										 const int nPointsPerSimplex,
										 const int nSpace,
										 const int nQuadraturePoints_elementBoundary,
										 const int *rowptr,
										 const int *colind,
										 const int* elementBoundaryElementsArray,
										 const int* quadraturePointToElementBoundary,
										 const int* materialTypes,
										 const double rho,
										 const double beta,
										 const double* gravity,
										 const double* alpha,
										 const double* n_vg,
										 const double* thetaR,
										 const double* thetaSR,
										 const double* KWs,
										 const double *u,
										 const double *gradu,
										 const double *n_global,
										 const double *dV,
										 double *mass,
										 double *dmass,
										 double *f_avg,
										 double *df_avg,
										 double *a_avg,
										 double *da_avg,
										 double *f,
										 double *df,
										 double *a,
											double *da);
extern void applyContactLineSlip(int nExteriorElementBoundaries_global,
                          int nQuadraturePoints_elementBoundary,
                          double eps,
                          int* isDOFBoundary,
                          double* phi,
                          double* advectiveFlux,
				 double* diffusiveFlux);
extern void applyContactLineSlipJacobian(int nExteriorElementBoundaries_global,
                                  int nQuadraturePoints_elementBoundary,
                                  int nDOF_trial_element,
                                  double eps,
                                  int* isDOFBoundary,
                                  double* phi,
					 double* fluxJacobian);
extern void calculateEddyViscosity_Smagorinsky_2D(const int nElements_global,
					   const int nQuadraturePoints_element,
					   const double smagorinskyConstant,
					   const double * h_e,
					   const double * grad_u,
					   const double * grad_v,
						  double * nu_t);
extern void calculateEddyViscosity_Smagorinsky_3D(const int nElements_global,
					   const int nQuadraturePoints_element,
					   const double smagorinskyConstant,
					   const double * h_e,
					   const double * grad_u,
					   const double * grad_v,
					   const double * grad_w,
						  double * nu_t);
extern void calculateEddyViscosity_Smagorinsky2P_2D(const int nElements_global,
					     const int nQuadraturePoints_element,
					     const double smagorinskyConstant_0,
					     const double smagorinskyConstant_1,
					     const double  eps,
					     const double * phi_ls,
					     const double * h_e,
					     const double * grad_u,
					     const double * grad_v,
						    double * nu_t);
extern void calculateEddyViscosity_Smagorinsky2P_3D(const int nElements_global,
					     const int nQuadraturePoints_element,
					     const double smagorinskyConstant_0,
					     const double smagorinskyConstant_1,
					     const double eps,
					     const double * phi_ls,
					     const double * h_e,
					     const double * grad_u,
					     const double * grad_v,
					     const double * grad_w,
						    double * nu_t);
extern void eddyViscosity_2D_Update(const int nPoints,
			     const double* nu_t,
			     double *mom_u_diff_ten,
			     double *mom_v_diff_ten,
			     double *mom_uv_diff_ten,
				    double *mom_vu_diff_ten);
extern void eddyViscosity_2D_Update_sd(const int nPoints,
				const double* nu_t,
				double *mom_u_diff_ten,
				double *mom_v_diff_ten,
				double *mom_uv_diff_ten,
				       double *mom_vu_diff_ten);
extern void eddyViscosity_3D_Update(const int nPoints,
			     const double* nu_t,
			     double *mom_u_diff_ten,
			     double *mom_v_diff_ten,
			     double *mom_w_diff_ten,
			     double *mom_uv_diff_ten,
			     double *mom_uw_diff_ten,
			     double *mom_vu_diff_ten,
			     double *mom_vw_diff_ten,
			     double *mom_wu_diff_ten,
				    double *mom_wv_diff_ten);
extern void eddyViscosity_3D_Update_sd(const int nPoints,
				const double* nu_t,
				double *mom_u_diff_ten,
				double *mom_v_diff_ten,
				double *mom_w_diff_ten,
				double *mom_uv_diff_ten,
				double *mom_uw_diff_ten,
				double *mom_vu_diff_ten,
				double *mom_vw_diff_ten,
				double *mom_wu_diff_ten,
				       double *mom_wv_diff_ten);
extern void calculateWaveFunction3d_ref(//mesh rep 
				 int nElements_global,
				 int nDOF_element_mesh,
				 int nQuadraturePoints_element,
				 const double* mesh_trial_ref,
				 const double* mesh_dof,
				 const int* mesh_l2g,
				 const double* elementDiametersArray,
				 //
				 const double* omega_s_x, //source region (rectangular)
				 const double* omega_s_y,
				 const double* omega_s_z,
				 double t,
				 int waveFlag, //1 secondOrderStokes
				               //2 solitaryWave
                                               //0 monochromaticWave
				 double epsFact,
				 double waveHeight,
				 double waveCelerity,
				 double waveFrequency,
				 double waveNumber,
				 double waterDepth,
				 double* source);
extern void Mass_2D_Evaluate(const int nPoints,
		      double rho,
		      double *p,
		      double *u,
		      double *v,
		      double *mom_p_acc,
		      double *mom_u_acc,
		      double *mom_v_acc,
		      double *dmom_p_acc_p,
		      double *dmom_u_acc_u,
			     double *dmom_v_acc_v);
extern void Mass_3D_Evaluate(const int nPoints,
		      double rho,
		      double *p,
		      double *u,
		      double *v,
		      double *w,
		      double *mom_p_acc,
		      double *mom_u_acc,
		      double *mom_v_acc,
		      double *mom_w_acc,
		      double *dmom_p_acc_p,
		      double *dmom_u_acc_u,
		      double *dmom_v_acc_v,
			     double *dmom_w_acc_w);
extern void TwoPhaseAdvection_2D_Evaluate(const int nPoints,
                                  const double eps,
                                  const double rho_0,
                                  const double nu_0,
                                  const double rho_1,
                                  const double nu_1,
                                  const double *phi,
                                  const double *p,
                                  const double *u,
                                  const double *v,
                                  double *mass_adv,
                                  double *dmass_adv_p,
                                  double *dmass_adv_u,
                                  double *dmass_adv_v,
                                  double *mom_u_adv,
                                  double *dmom_u_adv_u,
                                  double *dmom_u_adv_v,
                                  double *mom_v_adv,
                                  double *dmom_v_adv_u,
					  double *dmom_v_adv_v);
extern void Laplace_Evaluate2D(const int nPoints,
		      double *mom_p_diff_ten,
		      double *mom_u_diff_ten,
			       double *mom_v_diff_ten);
extern void Laplace_Evaluate3D(const int nPoints,
		      double *mom_p_diff_ten,
		      double *mom_u_diff_ten,
		      double *mom_v_diff_ten,
			       double *mom_w_diff_ten);
extern void conservativeHeadRichardsJLeverett(const int nSimplex,
                                       const int nPointsPerSimplex,
                                       const int nSpace,
                                       const int* materialTypes,
                                       const double rho,
                                       const double beta,
                                       const double* gravity,
                                       const double* phi,
                                       const double* psiD,
                                       const double* ns,
                                       const double* nk,
                                       const double* S_wirr,
                                       const double* S_nwr,
                                       const double* kr0,
                                       double *u,
                                       double *mass,
                                       double *dmass,
                                       double *f,
                                       double *df,
                                       double *a,
					      double *da);
extern void conservativeHeadRichardsJLeverettAni(const int nSimplex,
                                       const int nPointsPerSimplex,
                                       const int nSpace,
                                       const int* materialTypes,
                                       const double rho,
                                       const double beta,
                                       const double* gravity,
                                       const double* phi,
                                       const double* psiD,
                                       const double* ns,
                                       const double* nk,
                                       const double* S_wirr,
                                       const double* S_nwr,
                                       const double* kr0x,
                                       const double* kr0y,
                                       const double* kr0z,
                                       double *u,
                                       double *mass,
                                       double *dmass,
                                       double *f,
                                       double *df,
                                       double *a,
						 double *da);
extern void diffusiveWave1DEvaluate(const int nPoints,
			     const double alpha,
			     const double gamma,
			     const double epsilon,
			     const double* x,
			     const double* u,
			     const double* grad_u,
			     double* m,
			     double* dm,
			     double* a,
				    double* da);
extern void diffusiveWave2DEvaluate(const int nd,
			     const int nPoints,
			     const double alpha,
			     const double gamma,
			     const double epsilon,
			     const double* x,
			     const double* u,
			     const double* grad_u,
			     double* m,
			     double* dm,
			     double* a,
				    double* da);
/** @} */
#endif
